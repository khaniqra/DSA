//Binary search tree

#include <stdio.h>
#include <stdlib.h>
struct node{
int key;
struct node *left,*right;
};

//Create node

struct node *newNode(int item){
  struct node *temp=(struct node *)malloc(sizeof(struct node));
  temp->key = item;
  temp->key = temp ->right = NULL;
  return temp;
}

//Inoder traversal

void inorder(struct node *root){
  if(root != NULL){
    //Travers left
    inorder(root->left);

    //Traverse root
    printf("%d ",root->key);

    //Taverse right
    inorder(root->right);
  }
}

//Insert a node
struct node *insert(struct node *node, int key){
  //Return a new node if the tree is empty
  if(node == NULL){
    return newNode(key);
  }
  //Traverse to right place & insert node
  if(key < node->key){
    node->left = insert(node->left,key);
  else {
      node->right = insert(node->right,key);
    }
  return node;
  }

//Find the inorder successor
struct node *minValueNode(struct node *node){
  struct node *current = node;

  //Find the leftmost leaf
  while(current && current->left != NULL){
    current = current->left;
    }
    return current;
 }
//Deleting a node
struct node deleteNode(struct node *root,int key){
  //return if the tree is empty
  if(root == NULL){
    return root;
  }
  //Find the node to be deleted
  if(key<root->key){
    root->right=deleteNode(root->right,key);
  }
  else if(key>root->key){
    root->right=deleteNode(root->right,key);
  else{
    //if the node is owith only one child or no child
    if(root->left == NULL){
      struct node *temp = root->right;
      free(root);
      return temp;
    }
    else if(root->right == NULL){
      struct node *temp = root->left;
      free(root);
      return temp;
    }
    
  }
}
 }
}
}
