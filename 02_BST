#include<stdio.h>
#include<stdlib.h>

struct node 
{
 int data;
 struct node *right, *left, *next;
};

struct node* create(struct node *, int );
struct node* createNode(int);
void inorder(struct node *);
void preorder(struct node *);
void postorder(struct node *);
int binarysearch(struct node *, int );
struct node* binaryinsert(struct node *, int);
struct node* binarydelete(struct node *, int);

int main()
{
 struct node *root = NULL;
 root = create(root, 45);
 root = create(root, 15);
 root = create(root, 79);
 root = create(root, 90);
 root = create(root, 10);
 root = create(root, 55);
 root = create(root, 12);
 root = create(root, 20);
 root = create(root, 50);
	
 inorder(root);
  printf("\n");
  int key;
  printf("\nEnter value to search : \n");
  scanf("%d", &key);
  binarysearch(root, key);
  printf("\nEnter value to be inserted in BST: \n");
  scanf("%d", &key);
  binaryinsert(root, key);
  printf("\n");
  printf("\nThe inorder, preorder, postorder traversal of tree is : \n");
  inorder(root);
  printf("\n\n");
  preorder(root);
  printf("\n");
  postorder(root);
  printf("\n\n");
  int n;
  printf("Enter element to delete from BST : ");
  scanf("%d", &n);
  root = binarydelete(root, n);
  printf("Inorder Traversal of BST is : \n");
  inorder(root);
  printf("\n");
  
}

struct node* create(struct node *root, int a)
{
 if(root == NULL)
 {
  root = createNode(a);
  return root;
 }
 else
 {
  if(root->data > a)
   root->left = create(root->left, a);
  else root->right = create(root->right, a);
 }
 return root;
}

struct node* createNode(int a)
{
 struct node *temp;
 temp = (struct node*)malloc(sizeof(struct node));
 temp->data = a;
 temp->right = NULL;
 temp->left = NULL;
 return temp;
}

void inorder(struct node *root)
{
 if(root == NULL)
  return;
 inorder(root->left);
 printf("%d ", root->data);
 inorder(root->right);
}

void preorder(struct node *root)
{
 if(root == NULL)
  return;
  printf("%d ", root->data);
 preorder(root->left);
 preorder(root->right);
}

void postorder(struct node *root)
{
 if(root == NULL)
  return;
 postorder(root->left);
 postorder(root->right);
 printf("%d ", root->data);
}

int binarysearch(struct node *root, int key)
{
  if(root == NULL)
  {
    printf("\nElement not found. / Tree is Empty !\n");
    return -1;
  }
  if(root->data == key)
  {
    printf("\nElement found. Tree has element %d .\n", key);
    return root->data;
  }
  else if(root->data < key)
    return binarysearch(root->right, key);
  else binarysearch(root->left, key);

  return 0;
}

struct node* binaryinsert(struct node *root, int key)
{
  if(root == NULL)
  {
    root = createNode(key);
    // No code for linking nodes ...
    printf("\nThe %d element inserted in BST.\n", key);
  }
  else if(key > root->data)
    root->right = binaryinsert(root->right, key);
  else if(key < root->data)
    root->left = binaryinsert(root->left, key);
  else // for == 
    root->left = binaryinsert(root->left, key);
  return root;
}

struct node *minValueNode(struct node *node) {
  struct node *current = node;

  // Find the leftmost leaf
  while (current && current->left != NULL)
    current = current->left;

  return current;
}

struct node* binarydelete(struct node *root, int key)
{
  struct node *p = root;
  if(root == NULL)
    return NULL;
  if(root->left == NULL && root->right == NULL)
  {
    free(root);
    return NULL;
  }
  if(root->data > key)
    root->left = binarydelete(root->left, key);
  else if(root->data < key)
    root->right = binarydelete(root->right, key);
  else
  {
    if (root->left == NULL) {
      struct node *temp = root->right;
      free(root);
      return temp;
    } 
    else if (root->right == NULL) 
    {
      struct node *temp = root->left;
      free(root);
      return temp;
    }
    // Having 2 childs
    struct node *temp = minValueNode(root->right);

    // Place the inorder successor in position of the node to be deleted
    root->data = temp->data;

    // Delete the inorder successor
    root->right = binarydelete(root->right, temp->data);
      
  }
  
  return root;
}
